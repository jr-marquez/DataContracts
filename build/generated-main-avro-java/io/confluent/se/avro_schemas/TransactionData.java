/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.se.avro_schemas;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TransactionData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6949595168111656342L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionData\",\"namespace\":\"io.confluent.se.avro_schemas\",\"fields\":[{\"name\":\"id_trx\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"id_customer\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"IBAN\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"concept\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"type_of_customer\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransactionData> ENCODER =
      new BinaryMessageEncoder<TransactionData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionData> DECODER =
      new BinaryMessageDecoder<TransactionData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransactionData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransactionData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransactionData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransactionData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransactionData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransactionData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransactionData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TransactionData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Integer id_trx;
  private java.lang.Integer id_customer;
  private java.lang.String IBAN;
  private java.lang.Integer amount;
  private java.lang.String concept;
  private java.lang.String type_of_customer;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionData() {}

  /**
   * All-args constructor.
   * @param id_trx The new value for id_trx
   * @param id_customer The new value for id_customer
   * @param IBAN The new value for IBAN
   * @param amount The new value for amount
   * @param concept The new value for concept
   * @param type_of_customer The new value for type_of_customer
   */
  public TransactionData(java.lang.Integer id_trx, java.lang.Integer id_customer, java.lang.String IBAN, java.lang.Integer amount, java.lang.String concept, java.lang.String type_of_customer) {
    this.id_trx = id_trx;
    this.id_customer = id_customer;
    this.IBAN = IBAN;
    this.amount = amount;
    this.concept = concept;
    this.type_of_customer = type_of_customer;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id_trx;
    case 1: return id_customer;
    case 2: return IBAN;
    case 3: return amount;
    case 4: return concept;
    case 5: return type_of_customer;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id_trx = (java.lang.Integer)value$; break;
    case 1: id_customer = (java.lang.Integer)value$; break;
    case 2: IBAN = value$ != null ? value$.toString() : null; break;
    case 3: amount = (java.lang.Integer)value$; break;
    case 4: concept = value$ != null ? value$.toString() : null; break;
    case 5: type_of_customer = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id_trx' field.
   * @return The value of the 'id_trx' field.
   */
  public java.lang.Integer getIdTrx() {
    return id_trx;
  }


  /**
   * Sets the value of the 'id_trx' field.
   * @param value the value to set.
   */
  public void setIdTrx(java.lang.Integer value) {
    this.id_trx = value;
  }

  /**
   * Gets the value of the 'id_customer' field.
   * @return The value of the 'id_customer' field.
   */
  public java.lang.Integer getIdCustomer() {
    return id_customer;
  }


  /**
   * Sets the value of the 'id_customer' field.
   * @param value the value to set.
   */
  public void setIdCustomer(java.lang.Integer value) {
    this.id_customer = value;
  }

  /**
   * Gets the value of the 'IBAN' field.
   * @return The value of the 'IBAN' field.
   */
  public java.lang.String getIBAN() {
    return IBAN;
  }


  /**
   * Sets the value of the 'IBAN' field.
   * @param value the value to set.
   */
  public void setIBAN(java.lang.String value) {
    this.IBAN = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Integer getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Integer value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'concept' field.
   * @return The value of the 'concept' field.
   */
  public java.lang.String getConcept() {
    return concept;
  }


  /**
   * Sets the value of the 'concept' field.
   * @param value the value to set.
   */
  public void setConcept(java.lang.String value) {
    this.concept = value;
  }

  /**
   * Gets the value of the 'type_of_customer' field.
   * @return The value of the 'type_of_customer' field.
   */
  public java.lang.String getTypeOfCustomer() {
    return type_of_customer;
  }


  /**
   * Sets the value of the 'type_of_customer' field.
   * @param value the value to set.
   */
  public void setTypeOfCustomer(java.lang.String value) {
    this.type_of_customer = value;
  }

  /**
   * Creates a new TransactionData RecordBuilder.
   * @return A new TransactionData RecordBuilder
   */
  public static io.confluent.se.avro_schemas.TransactionData.Builder newBuilder() {
    return new io.confluent.se.avro_schemas.TransactionData.Builder();
  }

  /**
   * Creates a new TransactionData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionData RecordBuilder
   */
  public static io.confluent.se.avro_schemas.TransactionData.Builder newBuilder(io.confluent.se.avro_schemas.TransactionData.Builder other) {
    if (other == null) {
      return new io.confluent.se.avro_schemas.TransactionData.Builder();
    } else {
      return new io.confluent.se.avro_schemas.TransactionData.Builder(other);
    }
  }

  /**
   * Creates a new TransactionData RecordBuilder by copying an existing TransactionData instance.
   * @param other The existing instance to copy.
   * @return A new TransactionData RecordBuilder
   */
  public static io.confluent.se.avro_schemas.TransactionData.Builder newBuilder(io.confluent.se.avro_schemas.TransactionData other) {
    if (other == null) {
      return new io.confluent.se.avro_schemas.TransactionData.Builder();
    } else {
      return new io.confluent.se.avro_schemas.TransactionData.Builder(other);
    }
  }

  /**
   * RecordBuilder for TransactionData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionData>
    implements org.apache.avro.data.RecordBuilder<TransactionData> {

    private java.lang.Integer id_trx;
    private java.lang.Integer id_customer;
    private java.lang.String IBAN;
    private java.lang.Integer amount;
    private java.lang.String concept;
    private java.lang.String type_of_customer;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.se.avro_schemas.TransactionData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id_trx)) {
        this.id_trx = data().deepCopy(fields()[0].schema(), other.id_trx);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.id_customer)) {
        this.id_customer = data().deepCopy(fields()[1].schema(), other.id_customer);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.IBAN)) {
        this.IBAN = data().deepCopy(fields()[2].schema(), other.IBAN);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.concept)) {
        this.concept = data().deepCopy(fields()[4].schema(), other.concept);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.type_of_customer)) {
        this.type_of_customer = data().deepCopy(fields()[5].schema(), other.type_of_customer);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionData instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.se.avro_schemas.TransactionData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id_trx)) {
        this.id_trx = data().deepCopy(fields()[0].schema(), other.id_trx);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id_customer)) {
        this.id_customer = data().deepCopy(fields()[1].schema(), other.id_customer);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.IBAN)) {
        this.IBAN = data().deepCopy(fields()[2].schema(), other.IBAN);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.concept)) {
        this.concept = data().deepCopy(fields()[4].schema(), other.concept);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type_of_customer)) {
        this.type_of_customer = data().deepCopy(fields()[5].schema(), other.type_of_customer);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id_trx' field.
      * @return The value.
      */
    public java.lang.Integer getIdTrx() {
      return id_trx;
    }


    /**
      * Sets the value of the 'id_trx' field.
      * @param value The value of 'id_trx'.
      * @return This builder.
      */
    public io.confluent.se.avro_schemas.TransactionData.Builder setIdTrx(java.lang.Integer value) {
      validate(fields()[0], value);
      this.id_trx = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id_trx' field has been set.
      * @return True if the 'id_trx' field has been set, false otherwise.
      */
    public boolean hasIdTrx() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id_trx' field.
      * @return This builder.
      */
    public io.confluent.se.avro_schemas.TransactionData.Builder clearIdTrx() {
      id_trx = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id_customer' field.
      * @return The value.
      */
    public java.lang.Integer getIdCustomer() {
      return id_customer;
    }


    /**
      * Sets the value of the 'id_customer' field.
      * @param value The value of 'id_customer'.
      * @return This builder.
      */
    public io.confluent.se.avro_schemas.TransactionData.Builder setIdCustomer(java.lang.Integer value) {
      validate(fields()[1], value);
      this.id_customer = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id_customer' field has been set.
      * @return True if the 'id_customer' field has been set, false otherwise.
      */
    public boolean hasIdCustomer() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id_customer' field.
      * @return This builder.
      */
    public io.confluent.se.avro_schemas.TransactionData.Builder clearIdCustomer() {
      id_customer = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'IBAN' field.
      * @return The value.
      */
    public java.lang.String getIBAN() {
      return IBAN;
    }


    /**
      * Sets the value of the 'IBAN' field.
      * @param value The value of 'IBAN'.
      * @return This builder.
      */
    public io.confluent.se.avro_schemas.TransactionData.Builder setIBAN(java.lang.String value) {
      validate(fields()[2], value);
      this.IBAN = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'IBAN' field has been set.
      * @return True if the 'IBAN' field has been set, false otherwise.
      */
    public boolean hasIBAN() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'IBAN' field.
      * @return This builder.
      */
    public io.confluent.se.avro_schemas.TransactionData.Builder clearIBAN() {
      IBAN = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Integer getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public io.confluent.se.avro_schemas.TransactionData.Builder setAmount(java.lang.Integer value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public io.confluent.se.avro_schemas.TransactionData.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'concept' field.
      * @return The value.
      */
    public java.lang.String getConcept() {
      return concept;
    }


    /**
      * Sets the value of the 'concept' field.
      * @param value The value of 'concept'.
      * @return This builder.
      */
    public io.confluent.se.avro_schemas.TransactionData.Builder setConcept(java.lang.String value) {
      validate(fields()[4], value);
      this.concept = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'concept' field has been set.
      * @return True if the 'concept' field has been set, false otherwise.
      */
    public boolean hasConcept() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'concept' field.
      * @return This builder.
      */
    public io.confluent.se.avro_schemas.TransactionData.Builder clearConcept() {
      concept = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'type_of_customer' field.
      * @return The value.
      */
    public java.lang.String getTypeOfCustomer() {
      return type_of_customer;
    }


    /**
      * Sets the value of the 'type_of_customer' field.
      * @param value The value of 'type_of_customer'.
      * @return This builder.
      */
    public io.confluent.se.avro_schemas.TransactionData.Builder setTypeOfCustomer(java.lang.String value) {
      validate(fields()[5], value);
      this.type_of_customer = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'type_of_customer' field has been set.
      * @return True if the 'type_of_customer' field has been set, false otherwise.
      */
    public boolean hasTypeOfCustomer() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'type_of_customer' field.
      * @return This builder.
      */
    public io.confluent.se.avro_schemas.TransactionData.Builder clearTypeOfCustomer() {
      type_of_customer = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionData build() {
      try {
        TransactionData record = new TransactionData();
        record.id_trx = fieldSetFlags()[0] ? this.id_trx : (java.lang.Integer) defaultValue(fields()[0]);
        record.id_customer = fieldSetFlags()[1] ? this.id_customer : (java.lang.Integer) defaultValue(fields()[1]);
        record.IBAN = fieldSetFlags()[2] ? this.IBAN : (java.lang.String) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (java.lang.Integer) defaultValue(fields()[3]);
        record.concept = fieldSetFlags()[4] ? this.concept : (java.lang.String) defaultValue(fields()[4]);
        record.type_of_customer = fieldSetFlags()[5] ? this.type_of_customer : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionData>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionData>
    READER$ = (org.apache.avro.io.DatumReader<TransactionData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id_trx == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.id_trx);
    }

    if (this.id_customer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.id_customer);
    }

    if (this.IBAN == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.IBAN);
    }

    if (this.amount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.amount);
    }

    if (this.concept == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.concept);
    }

    if (this.type_of_customer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.type_of_customer);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id_trx = null;
      } else {
        this.id_trx = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.id_customer = null;
      } else {
        this.id_customer = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.IBAN = null;
      } else {
        this.IBAN = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.amount = null;
      } else {
        this.amount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.concept = null;
      } else {
        this.concept = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.type_of_customer = null;
      } else {
        this.type_of_customer = in.readString();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id_trx = null;
          } else {
            this.id_trx = in.readInt();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id_customer = null;
          } else {
            this.id_customer = in.readInt();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.IBAN = null;
          } else {
            this.IBAN = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.amount = null;
          } else {
            this.amount = in.readInt();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.concept = null;
          } else {
            this.concept = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.type_of_customer = null;
          } else {
            this.type_of_customer = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










